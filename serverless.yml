service: dyn-backend
frameworkVersion: '3'

# plugins:

provider:
  name: aws
  runtime: nodejs16.x
  region: eu-central-1
  profile: iamahsandev
  apiGateway:
    shouldStartNameWithService: true
  environment:
    USER_POOL_ID: { Ref: UserPool }
    USER_POOL_CLIENT_ID: { Ref: UserClient }
    USER_TABLE: ${self:custom.dynamodb}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource: "*"
        - Effect: Allow
          Action:
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
          Resource: "*"
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
          Resource: "arn:aws:dynamodb:eu-central-1:*:table/${self:custom.dynamodb}"


custom:
  bucketName: www.dyn.iamahsan.dev
  HostedZoneId: 'Z085775936KQNY3CN8AWD'
  dynamodb: dyn-users-table


functions:
  login:
    handler: functions/login.handler
    description: Function for handling user logins.
    events:
      - http:
          path: user/login
          method: POST
          cors: true
  register:
    handler: functions/register.handler
    description: Function for creating new users.
    events:
      - http:
          path: user/register
          method: POST
          cors: true
  profile:
    handler: functions/profile.handler
    description: Get authenticated user's profile.
    events:
      - http:
          path: user/profile
          method: GET
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

resources:
  # S3
  - ${file(resources/s3-bucket.yml)}
  # Cognito
  - ${file(resources/cognito.yml)}
  # DynamoDB
  - ${file(resources/dynamodb.yml)}